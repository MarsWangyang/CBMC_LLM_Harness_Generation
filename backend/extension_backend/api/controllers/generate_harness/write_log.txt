
### Task: Generating a CBMC Harness for Function Verification

You are given a function and its relevant assumptions, along with structured metadata representing function relationships and dependencies. Your task is to generate a **CBMC proof harness** using **only the specified syntax**.

### **Syntax Reference**
Use only the following syntax when generating assumptions:

unsigned int nondet_uint();
__CPROVER_assume(condition);
__CPROVER_assert(condition, "assertion message");

You must ensure that:
- All nondeterministic values are constrained with __CPROVER_assume
- Assertions are placed after assumptions to prevent vacuous proofs
- Loop unwinding assertions are included where necessary and appropriately
- Stub functions return nondeterministic values but are assumed within valid ranges

### **Input Description**
- **entryPoint**: The main function to generate the harness for is also a key that can be used to access functionMap, functionIndex, functionCode
- **callMatrix**: Represents function call dependencies, where keys are functions mapping to called functions with invocation counts, illustrating execution flow.
- **functionCode**: A mapping `{ function_name: code_for_function }` linking function names to their relevant code
- **codeAnalysis**: A mapping of function assumptions for verification, categorizing variables by type, modeling input constraints, global state, loop bounds, and stub behavior for analysis containing:
{
  "function_name": {"variable_name": ["variable_type", "assumption_type", "description of the assumption (within 20 words)"]}
} 

### **Expected Output (harness name should be entryPoint_harness) **
**entryPoint**_harness() {
    assumptions here
    **entryPoint** function here
    assumptions (where necessary)
}

Only produce the harness function above. Do not include anything other than that in your response

### **Example**
// Insertion Sort function
void insertionSort(int arr[], int size) {
    for (int i = 1; i < size; i++) {
        for (int j = 0; j < i; j++) {
            if (arr[j] > arr[i]) {
                int temp = arr[j];
                arr[j] = arr[i];
                arr[i] = temp;
            }
        }
    }
}
// **codeAnalysis** input:
{
  "arr": ["int[]", "input variable modeling", "The array should be initialized and its size must be known and fixed."],
  "size": ["int", "input variable modeling", "The size of the array must be positive and correctly reflect the number of elements in arr."],
  "i": ["int", "loop unwinding assertions", "The loop variable i should iterate from 1 to size-1, ensuring it stays within bounds."],
  "j": ["int", "loop unwinding assertions", "The loop variable j should iterate from 0 to i-1, ensuring it does not access out-of-bound elements."]
}

### **Output**
void insertionSort_harness() {
    int arr[10];
    int size = nondet_uint();

    __CPROVER_assume(size > 0 && size <= 10);

    for (int i = 1; i < size; i++) {
        __CPROVER_assume(i >= 1 && i < size);
        for (int j = 0; j < i; j++) {
            __CPROVER_assume(j >= 0 && j < i);
        }
    }

    insertionSort(arr, size);
}


{
    "entryPoint": "HTTPClient_ReadHeader",
    "callMatrix": {
        "httpParserOnHeaderFieldCallback": {
            "processCompleteHeader": 1
        },
        "httpParserOnHeadersCompleteCallback": {
            "processCompleteHeader": 1
        },
        "parseHttpResponse": {
            "processLlhttpError": 1
        },
        "addRangeHeader": {
            "convertInt32ToAscii": 1,
            "addHeader": 1
        },
        "HTTPClient_InitializeRequestHeaders": {
            "writeRequestLine": 1,
            "addHeader": 1
        },
        "HTTPClient_AddHeader": {
            "addHeader": 1
        },
        "HTTPClient_AddRangeHeader": {
            "addRangeHeader": 1
        },
        "addContentLengthHeader": {
            "convertInt32ToAscii": 1,
            "addHeader": 1
        },
        "HTTPClient_SendHttpHeaders": {
            "addContentLengthHeader": 1,
            "HTTPClient_SendHttpData": 1
        },
        "sendHttpBody": {
            "HTTPClient_SendHttpData": 1
        },
        "HTTPClient_ReceiveAndParseHttpResponse": {
            "initializeParsingContextForFirstResponse": 1,
            "parseHttpResponse": 1,
            "getFinalResponseStatus": 1
        },
        "sendHttpRequest": {
            "HTTPClient_SendHttpHeaders": 1,
            "sendHttpBody": 1
        },
        "HTTPClient_Send": {
            "sendHttpRequest": 1,
            "HTTPClient_ReceiveAndParseHttpResponse": 1
        },
        "findHeaderFieldParserCallback": {
            "caseInsensitiveStringCmp": 1
        },
        "HTTPClient_ReadHeader": {
            "findHeaderInResponse": 1
        },
        "main": {
            "process_input_and_update_counter": 1
        },
        "sub": {
            "functionA": 1
        },
        "main_rand": {
            "sub": 1
        },
        "functionA": {
            "functionB": 1
        },
        "process_input_and_update_counter": {
            "read_sensor_stub": 1
        }
    },
    "functionCode": {
        "HTTPClient_ReadHeader": "HTTPStatus_t HTTPClient_ReadHeader(const HTTPResponse_t *pResponse,\n                                   const char *pField,\n                                   size_t fieldLen,\n                                   const char **pValueLoc,\n                                   size_t *pValueLen)\n{\n    HTTPStatus_t returnStatus = HTTPSuccess;\n\n    if (pResponse == NULL)\n    {\n        LogError((\"Parameter check failed: pResponse is NULL.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (pResponse->pBuffer == NULL)\n    {\n        LogError((\"Parameter check failed: pResponse->pBuffer is NULL.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (pResponse->bufferLen == 0U)\n    {\n        LogError((\"Parameter check failed: pResponse->bufferLen is 0: \"\n                  \"Buffer len should be > 0.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (pField == NULL)\n    {\n        LogError((\"Parameter check failed: Input header name is NULL.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (fieldLen == 0U)\n    {\n        LogError((\"Parameter check failed: Input header name length is 0: \"\n                  \"fieldLen should be > 0.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (pValueLoc == NULL)\n    {\n        LogError((\"Parameter check failed: Output parameter for header value location is NULL.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (pValueLen == NULL)\n    {\n        LogError((\"Parameter check failed: Output parameter for header value length is NULL.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else\n    {\n        /* Empty else for MISRA 15.7 compliance. */\n    }\n\n    if (returnStatus == HTTPSuccess)\n    {\n        returnStatus = findHeaderInResponse(pResponse->pBuffer,\n                                            pResponse->bufferLen,\n                                            pField,\n                                            fieldLen,\n                                            pValueLoc,\n                                            pValueLen);\n    }\n\n    return returnStatus;\n}",
        "findHeaderInResponse": "static HTTPStatus_t findHeaderInResponse(const uint8_t *pBuffer,\n                                         size_t bufferLen,\n                                         const char *pField,\n                                         size_t fieldLen,\n                                         const char **pValueLoc,\n                                         size_t *pValueLen)\n{\n    HTTPStatus_t returnStatus = HTTPSuccess;\n    llhttp_t parser = {0};\n    llhttp_settings_t parserSettings = {0};\n    llhttp_errno_t parserErrno;\n    findHeaderContext_t context = {0};\n\n    context.pField = pField;\n    context.fieldLen = fieldLen;\n    context.pValueLoc = pValueLoc;\n    context.pValueLen = pValueLen;\n    context.fieldFound = 0U;\n    context.valueFound = 0U;\n\n    /* The intention here to define callbacks just for searching the headers. We will\n     * need to create a private context in llhttp->data that has the field and\n     * value to update and pass back. */\n    llhttp_settings_init(&parserSettings);\n    parserSettings.on_header_field = findHeaderFieldParserCallback;\n    parserSettings.on_header_value = findHeaderValueParserCallback;\n    parserSettings.on_headers_complete = findHeaderOnHeaderCompleteCallback;\n    llhttp_init(&parser, HTTP_RESPONSE, &parserSettings);\n\n    /* Set the context for the parser. */\n    parser.data = &context;\n\n    /* Search for the desired header. */\n    parserErrno = llhttp_execute(&parser, (const char *)pBuffer, bufferLen);\n\n    if (context.fieldFound == 0U)\n    {\n        /* If header field is not found, then both the flags should be zero. */\n        assert(context.valueFound == 0U);\n\n        /* Header is not present in buffer. */\n        LogWarn((\"Header not found in response buffer: RequestedHeader=%.*s\",\n                 (int)fieldLen,\n                 pField));\n\n        returnStatus = HTTPHeaderNotFound;\n    }\n    else if (context.valueFound == 0U)\n    {\n        /* The response buffer is invalid as only the header field was found\n         * in the \"<field>: <value>\\r\\n\" format of an HTTP header. */\n        LogError((\"Unable to find header value in response: \"\n                  \"Response data is invalid: \"\n                  \"RequestedHeader=%.*s, ParserError=%s %s\",\n                  (int)fieldLen,\n                  pField,\n                  llhttp_errno_name(parserErrno),\n                  llhttp_get_error_reason(&parser)));\n        returnStatus = HTTPInvalidResponse;\n    }\n    else\n    {\n        /* Header is found. */\n        assert((context.fieldFound == 1U) && (context.valueFound == 1U));\n\n        LogDebug((\"Found requested header in response: \"\n                  \"HeaderName=%.*s, HeaderValue=%.*s\",\n                  (int)fieldLen,\n                  pField,\n                  (int)(*pValueLen),\n                  *pValueLoc));\n        returnStatus = HTTPSuccess;\n    }\n\n    /* If the header field-value pair is found in response, then the return\n     * value of the on_header_value callback should set the llhttp.error to\n     * HPE_USER. */\n    if ((returnStatus == HTTPSuccess) &&\n        (parserErrno != HPE_USER))\n    {\n        LogError((\"Header found in response but llhttp returned error: \"\n                  \"ParserError=%s %s\",\n                  llhttp_errno_name(parserErrno),\n                  llhttp_get_error_reason(&parser)));\n        returnStatus = HTTPParserInternalError;\n    }\n\n    /* If header was not found, then the \"on_header_complete\" callback is\n     * expected to be called which should set the llhttp.error to HPE_OK. */\n    else if ((returnStatus == HTTPHeaderNotFound) &&\n             (parserErrno != HPE_OK))\n    {\n        LogError((\"Header not found in response: llhttp returned error: \"\n                  \"ParserError=%s %s\",\n                  llhttp_errno_name(parserErrno),\n                  llhttp_get_error_reason(&parser)));\n        returnStatus = HTTPInvalidResponse;\n    }\n    else\n    {\n        /* Empty else for MISRA 15.7 compliance. */\n    }\n\n    return returnStatus;\n}"
    },
    "codeAnalysis": {
        "pResponse": [
            "const HTTPResponse_t *",
            "input variable modeling",
            "Must not be NULL and should have a valid filled buffer"
        ],
        "pField": [
            "const char *",
            "input variable modeling",
            "The field name must not be NULL and should have non-zero length"
        ],
        "fieldLen": [
            "size_t",
            "input variable modeling",
            "Must be greater than 0 to avoid empty field lookups"
        ],
        "pValueLoc": [
            "const char **",
            "input variable modeling",
            "Must not be NULL to store location of header value"
        ],
        "pValueLen": [
            "size_t *",
            "input variable modeling",
            "Must not be NULL to store length of found header value"
        ],
        "pBuffer": [
            "const uint8_t *",
            "input variable modeling",
            "Should be initialized and contain HTTP response data"
        ],
        "bufferLen": [
            "size_t",
            "input variable modeling",
            "Must be greater than 0 to process the buffer"
        ],
        "parserErrno": [
            "llhttp_errno_t",
            "loop unwinding assertions",
            "Should be checked for error values indicating bad parsing"
        ],
        "context.fieldFound": [
            "unsigned int",
            "global variable modeling",
            "Ensures if the header field is found during parsing"
        ],
        "context.valueFound": [
            "unsigned int",
            "global variable modeling",
            "Indicates if the header value has been found in parsing"
        ]
    }
}

```c
void HTTPClient_ReadHeader_harness() {
    const HTTPResponse_t *pResponse;
    const char *pField;
    size_t fieldLen;
    const char **pValueLoc;
    size_t *pValueLen;

    // Assumptions based on codeAnalysis
    __CPROVER_assume(pResponse != NULL && pResponse->pBuffer != NULL && pResponse->bufferLen > 0U);
    __CPROVER_assume(pField != NULL && fieldLen > 0U);
    __CPROVER_assume(pValueLoc != NULL);
    __CPROVER_assume(pValueLen != NULL);

    HTTPClient_ReadHeader(pResponse, pField, fieldLen, pValueLoc, pValueLen);
}
```