
### Task: CBMC Flag Selection**
Analyze function properties and generate a JSON object containing appropriate CBMC flags that should be used for verification.
    - Only use documented CBMC flags that are directly relevant to the function analysis
    - Flags should be based on the syntax referenced in this prompt
    - Do not generate unnecessary or default flags—only those required by the function’s structure and verification needs

### **CBMC Flag Reference*
CBMC supports various verification and transformation options. Based on the function analysis, select appropriate flags from the following categories:
    - Analysis Options: (--trace, --stop-on-fail, --property id)
    - Instrumentation Options: (--bounds-check, --pointer-check, --memory-leak-check, --unwind nr, --no-assertions)
    - Backend Solver Options: (--sat-solver z3, --dimacs, --smt2)
    - Program Representations: (--show-symbol-table, --show-goto-functions)

### **Input Description**
- **entryPoint**: A single function name that is the main function corresponding to 1 key that can be used to access functionMap, functionIndex, functionCode
- **callMatrix**: Represents function call dependencies, where keys are functions mapping to called functions with invocation counts, illustrating execution flow.
- **adjacencyMatrix**: An array of arrays representation of callMatrix, where each row represents a function and each column denotes its calls to other functions
- **functionMap**: A dictionary mapping `{ function_name: absolute_path_to_source_file }`, linking function names to their absolute path
- **functionIndex**: A mapping `{ function_name: index_in_adjacencyMatrix }`, linking function names to their indices for referencing **adjacencyMatrix**
- **functionCode**: A mapping `{ function_name: code_for_function }` linking function names to their relevant code

### **Expected Output (JSON Format)**
Starting from **entry_point** traverse through **callMatrix** until all **code** analyzed, output a JSON object listing CBMC flags:
{
  "flag_name": "flag_value"
}
Only produce the JSON object as output, do not include anything else in your response

### **Example**
#include <stdio.h>


// Insertion Sort function
void insertionSort(int arr[], int size) {
    for (int i = 1; i < size; i++) {
        for (int j = 0; j < i; j++) {
            if (arr[j] > arr[i]) {
                int temp = arr[j];
                arr[j] = arr[i];
                arr[i] = temp;
            }
        }
    }
}

### **Output**
{
  "--bounds-check": "enabled",
  "--pointer-check": "enabled",
  "--signed-overflow-check": "enabled",
  "--unwind": "5",
  "--trace": "enabled"
}

{
    "entryPoint": "HTTPClient_ReadHeader",
    "functionMap": {
        "getZeroTimestampMs": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "caseInsensitiveStringCmp": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "processCompleteHeader": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "httpParserOnMessageBeginCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "httpParserOnStatusCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "httpParserOnStatusCompleteCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "httpParserOnHeaderFieldCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "httpParserOnHeaderValueCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "httpParserOnHeadersCompleteCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "httpParserOnBodyCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "httpParserOnMessageCompleteCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "initializeParsingContextForFirstResponse": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "processLlhttpError": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "parseHttpResponse": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "convertInt32ToAscii": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "addHeader": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "addRangeHeader": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "writeRequestLine": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "HTTPClient_InitializeRequestHeaders": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "HTTPClient_AddHeader": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "HTTPClient_AddRangeHeader": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "HTTPClient_SendHttpData": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "addContentLengthHeader": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "HTTPClient_SendHttpHeaders": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "sendHttpBody": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "getFinalResponseStatus": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "HTTPClient_ReceiveAndParseHttpResponse": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "sendHttpRequest": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "HTTPClient_Send": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "findHeaderFieldParserCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "findHeaderValueParserCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "findHeaderOnHeaderCompleteCallback": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "findHeaderInResponse": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "HTTPClient_ReadHeader": "/home/russe/cbmc/freeRTOS/core_http_client.c",
        "main": "/home/russe/cbmc/main.c",
        "sub": "/home/russe/cbmc/random/main.c",
        "main_rand": "/home/russe/cbmc/random/main.c",
        "functionA": "/home/russe/cbmc/random/moduleA.c",
        "functionB": "/home/russe/cbmc/random/moduleB.c",
        "read_sensor_stub": "/home/russe/cbmc/src/sensor_stub.c",
        "process_input_and_update_counter": "/home/russe/cbmc/src/utilities.c"
    },
    "callMatrix": {
        "httpParserOnHeaderFieldCallback": {
            "processCompleteHeader": 1
        },
        "httpParserOnHeadersCompleteCallback": {
            "processCompleteHeader": 1
        },
        "parseHttpResponse": {
            "processLlhttpError": 1
        },
        "addRangeHeader": {
            "convertInt32ToAscii": 1,
            "addHeader": 1
        },
        "HTTPClient_InitializeRequestHeaders": {
            "writeRequestLine": 1,
            "addHeader": 1
        },
        "HTTPClient_AddHeader": {
            "addHeader": 1
        },
        "HTTPClient_AddRangeHeader": {
            "addRangeHeader": 1
        },
        "addContentLengthHeader": {
            "convertInt32ToAscii": 1,
            "addHeader": 1
        },
        "HTTPClient_SendHttpHeaders": {
            "addContentLengthHeader": 1,
            "HTTPClient_SendHttpData": 1
        },
        "sendHttpBody": {
            "HTTPClient_SendHttpData": 1
        },
        "HTTPClient_ReceiveAndParseHttpResponse": {
            "initializeParsingContextForFirstResponse": 1,
            "parseHttpResponse": 1,
            "getFinalResponseStatus": 1
        },
        "sendHttpRequest": {
            "HTTPClient_SendHttpHeaders": 1,
            "sendHttpBody": 1
        },
        "HTTPClient_Send": {
            "sendHttpRequest": 1,
            "HTTPClient_ReceiveAndParseHttpResponse": 1
        },
        "findHeaderFieldParserCallback": {
            "caseInsensitiveStringCmp": 1
        },
        "HTTPClient_ReadHeader": {
            "findHeaderInResponse": 1
        },
        "main": {
            "process_input_and_update_counter": 1
        },
        "sub": {
            "functionA": 1
        },
        "main_rand": {
            "sub": 1
        },
        "functionA": {
            "functionB": 1
        },
        "process_input_and_update_counter": {
            "read_sensor_stub": 1
        }
    },
    "adjacencyMatrix": [
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ]
    ],
    "functionIndex": {
        "getZeroTimestampMs": 0,
        "caseInsensitiveStringCmp": 1,
        "processCompleteHeader": 2,
        "httpParserOnMessageBeginCallback": 3,
        "httpParserOnStatusCallback": 4,
        "httpParserOnStatusCompleteCallback": 5,
        "httpParserOnHeaderFieldCallback": 6,
        "httpParserOnHeaderValueCallback": 7,
        "httpParserOnHeadersCompleteCallback": 8,
        "httpParserOnBodyCallback": 9,
        "httpParserOnMessageCompleteCallback": 10,
        "initializeParsingContextForFirstResponse": 11,
        "processLlhttpError": 12,
        "parseHttpResponse": 13,
        "convertInt32ToAscii": 14,
        "": 15,
        "addHeader": 16,
        "addRangeHeader": 17,
        "writeRequestLine": 18,
        "HTTPClient_InitializeRequestHeaders": 19,
        "HTTPClient_AddHeader": 20,
        "HTTPClient_AddRangeHeader": 21,
        "HTTPClient_SendHttpData": 22,
        "addContentLengthHeader": 23,
        "HTTPClient_SendHttpHeaders": 24,
        "sendHttpBody": 25,
        "getFinalResponseStatus": 26,
        "HTTPClient_ReceiveAndParseHttpResponse": 27,
        "sendHttpRequest": 28,
        "HTTPClient_Send": 29,
        "findHeaderFieldParserCallback": 30,
        "findHeaderValueParserCallback": 31,
        "findHeaderOnHeaderCompleteCallback": 32,
        "findHeaderInResponse": 33,
        "HTTPClient_ReadHeader": 34,
        "main": 35,
        "process_input_and_update_counter": 36,
        "sub": 37,
        "functionA": 38,
        "main_rand": 39,
        "functionB": 40,
        "read_sensor_stub": 41
    },
    "functionCode": {
        "HTTPClient_ReadHeader": "HTTPStatus_t HTTPClient_ReadHeader(const HTTPResponse_t *pResponse,\n                                   const char *pField,\n                                   size_t fieldLen,\n                                   const char **pValueLoc,\n                                   size_t *pValueLen)\n{\n    HTTPStatus_t returnStatus = HTTPSuccess;\n\n    if (pResponse == NULL)\n    {\n        LogError((\"Parameter check failed: pResponse is NULL.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (pResponse->pBuffer == NULL)\n    {\n        LogError((\"Parameter check failed: pResponse->pBuffer is NULL.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (pResponse->bufferLen == 0U)\n    {\n        LogError((\"Parameter check failed: pResponse->bufferLen is 0: \"\n                  \"Buffer len should be > 0.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (pField == NULL)\n    {\n        LogError((\"Parameter check failed: Input header name is NULL.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (fieldLen == 0U)\n    {\n        LogError((\"Parameter check failed: Input header name length is 0: \"\n                  \"fieldLen should be > 0.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (pValueLoc == NULL)\n    {\n        LogError((\"Parameter check failed: Output parameter for header value location is NULL.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else if (pValueLen == NULL)\n    {\n        LogError((\"Parameter check failed: Output parameter for header value length is NULL.\"));\n        returnStatus = HTTPInvalidParameter;\n    }\n    else\n    {\n        /* Empty else for MISRA 15.7 compliance. */\n    }\n\n    if (returnStatus == HTTPSuccess)\n    {\n        returnStatus = findHeaderInResponse(pResponse->pBuffer,\n                                            pResponse->bufferLen,\n                                            pField,\n                                            fieldLen,\n                                            pValueLoc,\n                                            pValueLen);\n    }\n\n    return returnStatus;\n}",
        "findHeaderInResponse": "static HTTPStatus_t findHeaderInResponse(const uint8_t *pBuffer,\n                                         size_t bufferLen,\n                                         const char *pField,\n                                         size_t fieldLen,\n                                         const char **pValueLoc,\n                                         size_t *pValueLen)\n{\n    HTTPStatus_t returnStatus = HTTPSuccess;\n    llhttp_t parser = {0};\n    llhttp_settings_t parserSettings = {0};\n    llhttp_errno_t parserErrno;\n    findHeaderContext_t context = {0};\n\n    context.pField = pField;\n    context.fieldLen = fieldLen;\n    context.pValueLoc = pValueLoc;\n    context.pValueLen = pValueLen;\n    context.fieldFound = 0U;\n    context.valueFound = 0U;\n\n    /* The intention here to define callbacks just for searching the headers. We will\n     * need to create a private context in llhttp->data that has the field and\n     * value to update and pass back. */\n    llhttp_settings_init(&parserSettings);\n    parserSettings.on_header_field = findHeaderFieldParserCallback;\n    parserSettings.on_header_value = findHeaderValueParserCallback;\n    parserSettings.on_headers_complete = findHeaderOnHeaderCompleteCallback;\n    llhttp_init(&parser, HTTP_RESPONSE, &parserSettings);\n\n    /* Set the context for the parser. */\n    parser.data = &context;\n\n    /* Search for the desired header. */\n    parserErrno = llhttp_execute(&parser, (const char *)pBuffer, bufferLen);\n\n    if (context.fieldFound == 0U)\n    {\n        /* If header field is not found, then both the flags should be zero. */\n        assert(context.valueFound == 0U);\n\n        /* Header is not present in buffer. */\n        LogWarn((\"Header not found in response buffer: RequestedHeader=%.*s\",\n                 (int)fieldLen,\n                 pField));\n\n        returnStatus = HTTPHeaderNotFound;\n    }\n    else if (context.valueFound == 0U)\n    {\n        /* The response buffer is invalid as only the header field was found\n         * in the \"<field>: <value>\\r\\n\" format of an HTTP header. */\n        LogError((\"Unable to find header value in response: \"\n                  \"Response data is invalid: \"\n                  \"RequestedHeader=%.*s, ParserError=%s %s\",\n                  (int)fieldLen,\n                  pField,\n                  llhttp_errno_name(parserErrno),\n                  llhttp_get_error_reason(&parser)));\n        returnStatus = HTTPInvalidResponse;\n    }\n    else\n    {\n        /* Header is found. */\n        assert((context.fieldFound == 1U) && (context.valueFound == 1U));\n\n        LogDebug((\"Found requested header in response: \"\n                  \"HeaderName=%.*s, HeaderValue=%.*s\",\n                  (int)fieldLen,\n                  pField,\n                  (int)(*pValueLen),\n                  *pValueLoc));\n        returnStatus = HTTPSuccess;\n    }\n\n    /* If the header field-value pair is found in response, then the return\n     * value of the on_header_value callback should set the llhttp.error to\n     * HPE_USER. */\n    if ((returnStatus == HTTPSuccess) &&\n        (parserErrno != HPE_USER))\n    {\n        LogError((\"Header found in response but llhttp returned error: \"\n                  \"ParserError=%s %s\",\n                  llhttp_errno_name(parserErrno),\n                  llhttp_get_error_reason(&parser)));\n        returnStatus = HTTPParserInternalError;\n    }\n\n    /* If header was not found, then the \"on_header_complete\" callback is\n     * expected to be called which should set the llhttp.error to HPE_OK. */\n    else if ((returnStatus == HTTPHeaderNotFound) &&\n             (parserErrno != HPE_OK))\n    {\n        LogError((\"Header not found in response: llhttp returned error: \"\n                  \"ParserError=%s %s\",\n                  llhttp_errno_name(parserErrno),\n                  llhttp_get_error_reason(&parser)));\n        returnStatus = HTTPInvalidResponse;\n    }\n    else\n    {\n        /* Empty else for MISRA 15.7 compliance. */\n    }\n\n    return returnStatus;\n}"
    }
}

```json
{
  "--pointer-check": "enabled",
  "--memory-leak-check": "enabled",
  "--bounds-check": "enabled",
  "--unwind": "5",
  "--trace": "enabled"
}
```